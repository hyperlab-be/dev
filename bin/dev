#!/usr/bin/env bash

export DEV_USER=${DEV_USER:-$UID}
export DEV_GROUP=${DEV_GROUP:-$(id -g)}

if [ $# -gt 0 ]; then

    # dev build
    if [ "$1" == "build" ]; then
        docker compose build "${@:2}"

    # dev start
    elif [ "$1" == "start" ]; then
        docker compose up -d "${@:2}"

    # dev rebuild
    elif [ "$1" == "rebuild" ]; then
        docker compose up -d --build "${@:2}"

    # dev restart
    elif [ "$1" == "restart" ]; then
        docker compose restart "${@:2}"

    # dev stop
    elif [ "$1" == "stop" ]; then
        docker compose down "${@:2}"

    # dev identity build
    elif [ "$2" == "build" ]; then
        docker compose build "$1"

    # dev identity start
    elif [ "$2" == "start" ]; then
        docker compose up -d "$1"

    # dev identity rebuild
    elif [ "$2" == "rebuild" ]; then
        docker compose up -d --build "$1"

    # dev identity restart
    elif [ "$2" == "restart" ]; then
        docker compose restart "$1"
    
    # dev identity stop
    elif [ "$2" == "stop" ]; then
        docker compose down "$1"

    # dev identity composer install
    elif [ "$2" == "composer" ] || [ "$2" == "com" ]; then
        docker compose exec -u dev "$1" composer "${@:3}"
    
    # dev identity artisan migrate:fresh
    elif [ "$2" == "artisan" ] || [ "$2" == "art" ]; then
        docker compose exec -u dev "$1" php artisan "${@:3}"

    # dev identity shell
    elif [ "$2" == "shell" ] || [ "$2" == "sh" ]; then
        docker compose exec -u dev "$1" bash

    # dev identity logs
    elif [ "$2" == "logs" ]; then
        docker compose logs "$1" "${@:3}"

    # dev identity ls
    else
        docker compose exec -u dev "$1" "${@:2}"

    fi
    
else
    echo "Environment commands:  dev {COMMAND}" >&2
    echo
    echo "   build        Build the environment"
    echo "   start        Start the environment"
    echo "   rebuild      Rebuild and restart the changed the container"
    echo "   restart      Restart the environment"
    echo "   stop         Stop the environment"
    echo
    echo "Service commands:  dev {SERVICE} {COMMAND} [ARGS]" >&2
    echo
    echo "   build        Build the service"
    echo "   start        Start the service"
    echo "   rebuild      Rebuild the service"
    echo "   restart      Restart the service"
    echo "   stop         Stop the service"
    echo "   composer     Run a Composer command against the service"
    echo "   com"
    echo "   artisan      Run an Artisan command against the service"
    echo "   art"
    echo "   shell        Open an interactive shell with the service"
    echo "   sh"
    echo "   logs         Print the logs of the service"
    echo "   {COMMAND}    Run an arbitrary command against the service"
    echo
    exit 1

fi